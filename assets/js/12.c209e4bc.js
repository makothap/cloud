(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{376:function(e,t,s){"use strict";s.r(t);var r=s(25),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"event-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-store"}},[e._v("#")]),e._v(" Event Store")]),e._v(" "),s("p",[e._v("plgd cloud persist events in an event store, which is a database of events. The store has an API for adding and retrieving device's / resource's events. Events needs to be versioned and written in a correct order. To achieve the consistency, optimistic concurrency control method is applied during each write."),s("br"),e._v("\nAfter the event is successfuly written into the event store, event is distributed to the event bus to all interested parties.")]),e._v(" "),s("p",[e._v("plgd Cloud defines EventStore interface what allows integration of different technologies to store the events. During the last 2 years the project evaluated multiple technologies, e.g.")]),e._v(" "),s("ul",[s("li",[e._v("CockroachDB")]),e._v(" "),s("li",[e._v("Apache Kafka")]),e._v(" "),s("li",[e._v("MongoDB")]),e._v(" "),s("li",[e._v("NATS Jetstream")]),e._v(" "),s("li",[e._v("Google Firestore")])]),e._v(" "),s("p",[e._v("Currently supported and preffered solution is MongoDB. Details how this integration works can be found below.")]),e._v(" "),s("h2",{attrs:{id:"mongodb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mongodb"}},[e._v("#")]),e._v(" MongoDB")]),e._v(" "),s("p",[e._v("Device's data are in the MongoDB organized per devices. For each connected device a new collection is created. Each event is modeled as a new document.")]),e._v(" "),s("h3",{attrs:{id:"queries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queries"}},[e._v("#")]),e._v(" Queries")]),e._v(" "),s("h4",{attrs:{id:"query-resources-b-of-device-d9dd7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#query-resources-b-of-device-d9dd7"}},[e._v("#")]),e._v(" Query resources B of device d9dd7...")]),e._v(" "),s("ol",[s("li",[e._v("Get Latest Snapshot"),s("br"),e._v("\na. Find document where _id == B.s"),s("br"),e._v("\nb. Get version of latest snapshot event")]),e._v(" "),s("li",[e._v("Find documents where aggregateID == B && version >= latestSnapshotVersion")])]),e._v(" "),s("h4",{attrs:{id:"query-all-resources-of-device-d9dd7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#query-all-resources-of-device-d9dd7"}},[e._v("#")]),e._v(" Query all resources of device d9dd7...")]),e._v(" "),s("ol",[s("li",[e._v("Get Latest Snapshots of all resources"),s("br"),e._v("\na. Find documents where aggregateID == snapshot && version == -1"),s("br"),e._v("\nb. Get versions of latest snapshot events per each resource")]),e._v(" "),s("li",[e._v("Find all documents per each resource where aggregateID == snapshot.aggregateID && version >= latestSnapshotVersion")])])])}),[],!1,null,null,null);t.default=o.exports}}]);