// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StubServiceClient is the client API for StubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StubServiceClient interface {
	TestCall(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestStream(ctx context.Context, opts ...grpc.CallOption) (StubService_TestStreamClient, error)
}

type stubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStubServiceClient(cc grpc.ClientConnInterface) StubServiceClient {
	return &stubServiceClient{cc}
}

func (c *stubServiceClient) TestCall(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.test.pb.StubService/TestCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubServiceClient) TestStream(ctx context.Context, opts ...grpc.CallOption) (StubService_TestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StubService_serviceDesc.Streams[0], "/ocf.cloud.test.pb.StubService/TestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stubServiceTestStreamClient{stream}
	return x, nil
}

type StubService_TestStreamClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type stubServiceTestStreamClient struct {
	grpc.ClientStream
}

func (x *stubServiceTestStreamClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stubServiceTestStreamClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StubServiceServer is the server API for StubService service.
// All implementations must embed UnimplementedStubServiceServer
// for forward compatibility
type StubServiceServer interface {
	TestCall(context.Context, *TestRequest) (*TestResponse, error)
	TestStream(StubService_TestStreamServer) error
	mustEmbedUnimplementedStubServiceServer()
}

// UnimplementedStubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStubServiceServer struct {
}

func (UnimplementedStubServiceServer) TestCall(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCall not implemented")
}
func (UnimplementedStubServiceServer) TestStream(StubService_TestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedStubServiceServer) mustEmbedUnimplementedStubServiceServer() {}

// UnsafeStubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StubServiceServer will
// result in compilation errors.
type UnsafeStubServiceServer interface {
	mustEmbedUnimplementedStubServiceServer()
}

func RegisterStubServiceServer(s grpc.ServiceRegistrar, srv StubServiceServer) {
	s.RegisterService(&_StubService_serviceDesc, srv)
}

func _StubService_TestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubServiceServer).TestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.test.pb.StubService/TestCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubServiceServer).TestCall(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubService_TestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StubServiceServer).TestStream(&stubServiceTestStreamServer{stream})
}

type StubService_TestStreamServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type stubServiceTestStreamServer struct {
	grpc.ServerStream
}

func (x *stubServiceTestStreamServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stubServiceTestStreamServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ocf.cloud.test.pb.StubService",
	HandlerType: (*StubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestCall",
			Handler:    _StubService_TestCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStream",
			Handler:       _StubService_TestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/plgd-dev/cloud/pkg/net/grpc/stub.proto",
}
